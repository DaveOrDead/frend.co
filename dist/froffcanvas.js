(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Froffcanvas = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

/**
 * @param {string} panelSelector 	Off-canvas element
 * @param {string} toggleSelector 	Button with which to toggle the off-canvas state
 * @param {object} options			Object containing config overrides
 */
;
Object.defineProperty(exports, "__esModule", {
	value: true
});
var Froffcanvas = function Froffcanvas() {
	var panelSelector = arguments.length <= 0 || arguments[0] === undefined ? '.js-fr-offcanvas' : arguments[0];
	var toggleSelector = arguments.length <= 1 || arguments[1] === undefined ? '.js-fr-offcanvas-toggle' : arguments[1];

	var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	var _ref$activePanelClass = _ref.activePanelClass;
	var activePanelClass = _ref$activePanelClass === undefined ? 'fr-offcanvas--is-active' : _ref$activePanelClass;
	var _ref$readyClass = _ref.readyClass;
	var readyClass = _ref$readyClass === undefined ? 'has-fr-offcanvas' : _ref$readyClass;

	//	CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;
	// const html = doc.getElementByTagName('html');
	var transitionEventSyntax = {
		transition: 'transitionend',
		WebkitTransition: 'webkitTransitionEnd',
		MozTransition: 'transitionend',
		OTransition: 'oTransitionEnd otransitionend'
	};

	//	SUPPORTS
	if (!'querySelector' in document || !'addEventListener' in window || !docEl.classList) return;

	//	SETUP
	var panel = doc.querySelector(panelSelector);
	var toggle = doc.querySelector(toggleSelector);
	var transitionEventName = 'transitionend';
	var docOverflow = {};

	//	UTILS
	function _defer(func) {
		//	wrapped in setTimeout to delay binding until previous rendering has completed
		if (typeof func === 'function') setTimeout(func, 0);
	}
	function _closest(el, fn) {
		// closest: http://clubmate.fi/jquerys-closest-function-and-pure-javascript-alternatives/
		return el && (fn(el) ? el : _closest(el.parentNode, fn));
	}
	function _getPropValue(el, prop) {
		//	return css property value
		return doc.defaultView.getComputedStyle(el, null).getPropertyValue(prop);
	}

	//	Cross-browser
	function _setTransitionEventPrefix() {
		//	loop through prefixes and return relevant event
		for (var prefix in transitionEventSyntax) {
			if (panel.style[prefix] !== undefined) return transitionEventSyntax[prefix];
		}
	}
	function _setDocOverflowProperty() {
		//	save document overflow properties to apply when closing panel
		docOverflow.overflow = _getPropValue(docEl, 'overflow');
		docOverflow.overflowY = _getPropValue(docEl, 'overflow-y');
	}

	//	A11y
	function _addA11y() {
		//	add aria-hidden attribute
		panel.setAttribute('aria-hidden', true);
	}
	function _removeA11y() {
		//	add aria-hidden attribute
		panel.removeAttribute('aria-hidden');
	}

	//	Events
	function _eventPointer() {
		var panelHidden = panel.getAttribute('aria-hidden') === 'true';
		if (panelHidden) {
			_showPanel();
		} else {
			_hidePanel();
		}
	}
	function _eventDocClick(e) {
		//	check if target is panel or child of
		var isPanel = e.target == panel;
		var isPanelChild = _closest(e.target, function (el) {
			if (el != doc) return el.classList.contains(panelSelector.substring(1));
		});
		if (!isPanel && !isPanelChild) _hidePanel();
	}
	function _eventDocKey(e) {
		//	esc key
		if (e.keyCode === 27) _hidePanel();
	}
	function _eventTransitionEnd(e) {
		//	set visibilty property to remove keyboard access
		panel.style.visibility = 'hidden';
		//	transition event not needed
		_unbindTransitionEnd();
	}

	//	Bindings
	function _bindPointer() {
		toggle.addEventListener('click', _eventPointer);
	}
	function _bindDocClick() {
		doc.addEventListener('click', _eventDocClick);
	}
	function _bindDocKey() {
		doc.addEventListener('keydown', _eventDocKey);
	}
	function _bindTransitionEnd() {
		panel.addEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Unbind
	function _unbindPointer() {
		toggle.removeEventListener('click', _eventPointer);
	}
	function _unbindDocClick() {
		doc.removeEventListener('click', _eventDocClick);
	}
	function _unbindDocKey() {
		doc.removeEventListener('keydown', _eventDocKey);
	}
	function _unbindTransitionEnd() {
		panel.removeEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Actions
	function _showPanel() {
		//	remove aria-hidden, add focus
		panel.setAttribute('aria-hidden', false);
		panel.setAttribute('tabindex', 0);
		panel.focus();
		//	set visibility to override any previous set style
		panel.style.visibility = 'visible';
		//	bind document close events
		_defer(_bindDocClick); // this isn't working for enter, works for space though. WTF.
		_defer(_bindDocKey);
		//	add active class
		panel.classList.add(activePanelClass);
		//	fix overflow to remove scroll when covering the entire viewport
		_hideDocOverflow();
	}
	function _hidePanel() {
		//	add aria-hidden, remove focus
		panel.setAttribute('aria-hidden', true);
		panel.setAttribute('tabindex', -1);
		panel.blur();
		//	bind transition end
		_bindTransitionEnd();
		//	unbind document events
		_unbindDocKey();
		_unbindDocClick();
		//	remove active class
		panel.classList.remove(activePanelClass);
		//	fix overflow to remove scroll when covering the entire viewport
		_resetDocOverflow();
	}
	function destroy() {
		//	remove attributes
		_removeA11y();
		//	unbind events
		_unbindPointer();
		_unbindDocClick();
		_unbindDocKey();
		//	remove reference
		docEl.classList.remove(readyClass);
	}
	function _resetDocOverflow() {
		//	loop through overflow properties and set value
		for (var prop in docOverflow) {
			docEl.style[prop] = docOverflow[prop];
		}
	}
	function _hideDocOverflow() {
		//	prevent scrolling document when panel open
		docEl.style.overflow = 'hidden';
	}

	//	INIT
	function _init() {
		if (panel) {
			_addA11y();
			_bindPointer();
			_setTransitionEventPrefix();
			_setDocOverflowProperty();
			docEl.classList.add(readyClass);
		}
	}
	_init();

	// REVEAL API
	return {
		destroy: destroy
	};
};

// module exports
exports.default = Froffcanvas;
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
