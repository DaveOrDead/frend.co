(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Froffcanvas = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

/**
 * @param {string} panelSelector 	Off-canvas element
 * @param {string} toggleSelector 	Button with which to toggle the off-canvas state
 * @param {object} options			Object containing config overrides
 */
;
Object.defineProperty(exports, "__esModule", {
	value: true
});
var FrOffcanvas = function FrOffcanvas() {
	var selector = arguments.length <= 0 || arguments[0] === undefined ? '.js-fr-offcanvas' : arguments[0];

	var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	var _ref$openSelector = _ref.openSelector;
	var openSelector = _ref$openSelector === undefined ? openSelector = '.js-fr-offcanvas-open' : _ref$openSelector;
	var _ref$closeSelector = _ref.closeSelector;
	var closeSelector = _ref$closeSelector === undefined ? closeSelector = '.js-fr-offcanvas-close' : _ref$closeSelector;
	var _ref$toggleSelector = _ref.toggleSelector;
	var toggleSelector = _ref$toggleSelector === undefined ? toggleSelector = '.js-fr-offcanvas-toggle' : _ref$toggleSelector;
	var _ref$readyClass = _ref.readyClass;
	var readyClass = _ref$readyClass === undefined ? 'has-fr-offcanvas' : _ref$readyClass;
	var _ref$activeClass = _ref.activeClass;
	var activeClass = _ref$activeClass === undefined ? 'fr-offcanvas-is-active' : _ref$activeClass;
	var _ref$panelActiveClass = _ref.panelActiveClass;
	var panelActiveClass = _ref$panelActiveClass === undefined ? 'fr-offcanvas--is-active' : _ref$panelActiveClass;

	//	CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;
	var transitionEventSyntax = {
		transition: 'transitionend',
		WebkitTransition: 'webkitTransitionEnd',
		MozTransition: 'transitionend',
		OTransition: 'oTransitionEnd otransitionend'
	};

	//	SUPPORTS
	if (!'querySelector' in doc || !'addEventListener' in window || !docEl.classList) return;

	//	SETUP
	var panel = doc.querySelector(selector);
	var buttonOpen = doc.querySelector(openSelector);
	var buttonClose = doc.querySelector(closeSelector);
	var buttonToggle = doc.querySelector(toggleSelector);
	var transitionEventName = 'transitionend';

	//	UTILS
	function _defer(func) {
		//	wrapped in setTimeout to delay binding until previous rendering has completed
		if (typeof func === 'function') setTimeout(func, 0);
	}
	function _closest(el, fn) {
		// closest: http://clubmate.fi/jquerys-closest-function-and-pure-javascript-alternatives/
		return el && (fn(el) ? el : _closest(el.parentNode, fn));
	}

	//	Cross-browser
	function _setTransitionEventPrefix() {
		//	loop through prefixes and return relevant event
		for (var prefix in transitionEventSyntax) {
			if (panel.style[prefix] !== undefined) return transitionEventSyntax[prefix];
		}
	}

	//	A11y
	function _addA11y() {
		//	add aria-hidden attribute
		panel.setAttribute('aria-hidden', true);
	}
	function _removeA11y() {
		//	add aria-hidden attribute
		panel.removeAttribute('aria-hidden');
	}

	//	Events
	function _eventTogglePointer() {
		var panelHidden = panel.getAttribute('aria-hidden') === 'true';
		if (panelHidden) {
			_showPanel();
		} else {
			_hidePanel();
		}
	}
	function _eventOpenPointer() {
		_showPanel();
	}
	function _eventClosePointer() {
		_hidePanel();
	}
	function _eventDocClick(e) {
		//	check if target is panel or child of
		var isPanel = e.target == panel;
		var isPanelChild = _closest(e.target, function (el) {
			if (el != doc) return el.classList.contains(selector.substring(1));
		});
		if (!isPanel && !isPanelChild) _hidePanel();
	}
	function _eventDocKey(e) {
		//	esc key
		if (e.keyCode === 27) _hidePanel();
	}
	function _eventTransitionEnd(e) {
		//	set visibilty property to remove keyboard access
		panel.style.visibility = 'hidden';
		//	transition event not needed
		_unbindTransitionEnd();
	}

	//	Bindings
	function _bindTogglePointer() {
		if (!!buttonToggle) buttonToggle.addEventListener('click', _eventTogglePointer);
	}
	function _bindOpenPointer() {
		if (!!buttonOpen) buttonOpen.addEventListener('click', _eventOpenPointer);
	}
	function _bindClosePointer() {
		if (!!buttonClose) buttonClose.addEventListener('click', _eventClosePointer);
	}
	function _bindDocClick() {
		doc.addEventListener('click', _eventDocClick);
	}
	function _bindDocKey() {
		doc.addEventListener('keydown', _eventDocKey);
	}
	function _bindTransitionEnd() {
		panel.addEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Unbind
	function _unbindPointer() {
		buttonToggle.removeEventListener('click', _eventPointer);
	}
	function _unbindDocClick() {
		doc.removeEventListener('click', _eventDocClick);
	}
	function _unbindDocKey() {
		doc.removeEventListener('keydown', _eventDocKey);
	}
	function _unbindTransitionEnd() {
		panel.removeEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Actions
	function _showPanel() {
		//	set visibility to override any previous set style
		panel.style.visibility = 'visible';
		//	remove aria-hidden, add focus
		panel.setAttribute('aria-hidden', false);
		panel.setAttribute('tabindex', -1);
		panel.focus();
		//	bind document close events
		_defer(_bindDocClick); // this isn't working for enter, works for space though. WTF.
		_defer(_bindDocKey);
		//	reset scroll position
		panel.scrollTop = 0;
		//	add active class
		panel.classList.add(panelActiveClass);
		docEl.classList.add(activeClass);
	}
	function _hidePanel() {
		//	add aria-hidden, remove focus
		panel.setAttribute('aria-hidden', true);
		panel.removeAttribute('tabindex');
		panel.blur();
		//	bind transition end
		_bindTransitionEnd();
		//	unbind document events
		_unbindDocKey();
		_unbindDocClick();
		//	remove active class
		panel.classList.remove(panelActiveClass);
		docEl.classList.remove(activeClass);
	}
	function destroy() {
		//	remove attributes
		_removeA11y();
		//	unbind events
		_unbindPointer();
		_unbindDocClick();
		_unbindDocKey();
		//	remove reference
		docEl.classList.remove(readyClass);
	}

	//	INIT
	function init() {
		if (panel) {
			//	detect required properties
			_setTransitionEventPrefix();
			//	set a11y DOM properties
			_addA11y();
			//	bind button events
			_bindTogglePointer();
			_bindOpenPointer();
			_bindClosePointer();
			//	set ready class
			docEl.classList.add(readyClass);
		}
	}
	init();

	// REVEAL API
	return {
		init: init,
		destroy: destroy
	};
};

// module exports
exports.default = FrOffcanvas;
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJfY29tcG9uZW50cy9vZmZjYW52YXMvb2ZmY2FudmFzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7Ozs7QUFBWSxDQUFDOzs7O0FBT2IsSUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFXLEdBVWQ7S0FURCxRQUFRLHlEQUFHLGtCQUFrQjs7a0VBUXpCLEVBQUU7OzhCQU5MLFlBQVk7S0FBWixZQUFZLHFDQUFHLFlBQVksR0FBRyx1QkFBdUI7K0JBQ3JELGFBQWE7S0FBYixhQUFhLHNDQUFHLGFBQWEsR0FBRyx3QkFBd0I7Z0NBQ3hELGNBQWM7S0FBZCxjQUFjLHVDQUFHLGNBQWMsR0FBRyx5QkFBeUI7NEJBQzNELFVBQVU7S0FBRSxVQUFVLG1DQUFHLGtCQUFrQjs2QkFDM0MsV0FBVztLQUFFLFdBQVcsb0NBQUcsd0JBQXdCO2tDQUNuRCxnQkFBZ0I7S0FBRSxnQkFBZ0IseUNBQUcseUJBQXlCOzs7QUFNaEUsS0FBTSxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBQ3JCLEtBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUM7QUFDbEMsS0FBTSxxQkFBcUIsR0FBRztBQUM3QixZQUFVLEVBQUUsZUFBZTtBQUMzQixrQkFBZ0IsRUFBRSxxQkFBcUI7QUFDdkMsZUFBYSxFQUFFLGVBQWU7QUFDOUIsYUFBVyxFQUFFLCtCQUErQjtFQUM1Qzs7O0FBQUMsQUFJRixLQUFJLENBQUMsZUFBZSxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixJQUFJLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTzs7O0FBQUEsQUFJekYsS0FBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxLQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxD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QUFDLEFBSVAsUUFBTztBQUNOLE1BQUksRUFBSixJQUFJO0FBQ0osU0FBTyxFQUFQLE9BQU87RUFDUCxDQUFBO0NBQ0Q7OztBQUFBLGtCQUljLFdBQVciLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYW5lbFNlbGVjdG9yIFx0T2ZmLWNhbnZhcyBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9nZ2xlU2VsZWN0b3IgXHRCdXR0b24gd2l0aCB3aGljaCB0byB0b2dnbGUgdGhlIG9mZi1jYW52YXMgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHRcdFx0T2JqZWN0IGNvbnRhaW5pbmcgY29uZmlnIG92ZXJyaWRlc1xuICovXG5jb25zdCBGck9mZmNhbnZhcyA9IGZ1bmN0aW9uKFxuXHRcdHNlbGVjdG9yID0gJy5qcy1mci1vZmZjYW52YXMnLFxuXHRcdHtcblx0XHRcdG9wZW5TZWxlY3RvciA9IG9wZW5TZWxlY3RvciA9ICcuanMtZnItb2ZmY2FudmFzLW9wZW4nLFxuXHRcdFx0Y2xvc2VTZWxlY3RvciA9IGNsb3NlU2VsZWN0b3IgPSAnLmpzLWZyLW9mZmNhbnZhcy1jbG9zZScsXG5cdFx0XHR0b2dnbGVTZWxlY3RvciA9IHRvZ2dsZVNlbGVjdG9yID0gJy5qcy1mci1vZmZjYW52YXMtdG9nZ2xlJyxcblx0XHRcdHJlYWR5Q2xhc3M6IHJlYWR5Q2xhc3MgPSAnaGFzLWZyLW9mZmNhbnZhcycsXG5cdFx0XHRhY3RpdmVDbGFzczogYWN0aXZlQ2xhc3MgPSAnZnItb2ZmY2FudmFzLWlzLWFjdGl2ZScsXG5cdFx0XHRwYW5lbEFjdGl2ZUNsYXNzOiBwYW5lbEFjdGl2ZUNsYXNzID0gJ2ZyLW9mZmNhbnZhcy0taXMtYWN0aXZlJ1xuXHRcdH0gPSB7fVxuXHQpIHtcblxuXG5cdC8vXHRDT05TVEFOVFNcblx0Y29uc3QgZG9jID0gZG9jdW1lbnQ7XG5cdGNvbnN0IGRvY0VsID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0Y29uc3QgdHJhbnNpdGlvbkV2ZW50U3ludGF4ID0ge1xuXHRcdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcblx0XHRXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG5cdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuXHRcdE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnXG5cdH07XG5cblxuXHQvL1x0U1VQUE9SVFNcblx0aWYgKCEncXVlcnlTZWxlY3RvcicgaW4gZG9jIHx8ICEnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93IHx8ICFkb2NFbC5jbGFzc0xpc3QpIHJldHVybjtcblxuXG5cdC8vXHRTRVRVUFxuXHRsZXQgcGFuZWwgPSBkb2MucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5cdGxldCBidXR0b25PcGVuID0gZG9jLnF1ZXJ5U2VsZWN0b3Iob3BlblNlbGVjdG9yKTtcblx0bGV0IGJ1dHRvbkNsb3NlID0gZG9jLnF1ZXJ5U2VsZWN0b3IoY2xvc2VTZWxlY3Rvcik7XG5cdGxldCBidXR0b25Ub2dnbGUgPSBkb2MucXVlcnlTZWxlY3Rvcih0b2dnbGVTZWxlY3Rvcik7XG5cdGxldCB0cmFuc2l0aW9uRXZlbnROYW1lID0gJ3RyYW5zaXRpb25lbmQnO1xuXG5cblx0Ly9cdFVUSUxTXG5cdGZ1bmN0aW9uIF9kZWZlciAoZnVuYykge1xuXHRcdC8vXHR3cmFwcGVkIGluIHNldFRpbWVvdXQgdG8gZGVsYXkgYmluZGluZyB1bnRpbCBwcmV2aW91cyByZW5kZXJpbmcgaGFzIGNvbXBsZXRlZFxuXHRcdGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykgc2V0VGltZW91dChmdW5jLCAwKTtcblx0fVxuXHRmdW5jdGlvbiBfY2xvc2VzdCAoZWwsIGZuKSB7XG5cdFx0Ly8gY2xvc2VzdDogaHR0cDovL2NsdWJtYXRlLmZpL2pxdWVyeXMtY2xvc2VzdC1mdW5jdGlvbi1hbmQtcHVyZS1qYXZhc2NyaXB0LWFsdGVybmF0aXZlcy9cblx0XHRyZXR1cm4gZWwgJiYgKGZuKGVsKSA/IGVsIDogX2Nsb3Nlc3QoZWwucGFyZW50Tm9kZSwgZm4pKTtcblx0fVxuXG5cblx0Ly9cdENyb3NzLWJyb3dzZXJcblx0ZnVuY3Rpb24gX3NldFRyYW5zaXRpb25FdmVudFByZWZpeCAoKSB7XG5cdFx0Ly9cdGxvb3AgdGhyb3VnaCBwcmVmaXhlcyBhbmQgcmV0dXJuIHJlbGV2YW50IGV2ZW50XG5cdFx0Zm9yICh2YXIgcHJlZml4IGluIHRyYW5zaXRpb25FdmVudFN5bnRheCkge1xuXHRcdFx0aWYgKHBhbmVsLnN0eWxlW3ByZWZpeF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRyYW5zaXRpb25FdmVudFN5bnRheFtwcmVmaXhdO1xuXHRcdH1cblx0fVxuXG5cblx0Ly9cdEExMXlcblx0ZnVuY3Rpb24gX2FkZEExMXkgKCkge1xuXHRcdC8vXHRhZGQgYXJpYS1oaWRkZW4gYXR0cmlidXRlXG5cdFx0cGFuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXHR9XG5cdGZ1bmN0aW9uIF9yZW1vdmVBMTF5ICgpIHtcblx0XHQvL1x0YWRkIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZVxuXHRcdHBhbmVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblx0fVxuXG5cblx0Ly9cdEV2ZW50c1xuXHRmdW5jdGlvbiBfZXZlbnRUb2dnbGVQb2ludGVyICgpIHtcblx0XHRsZXQgcGFuZWxIaWRkZW4gPSBwYW5lbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJztcblx0XHRpZiAocGFuZWxIaWRkZW4pIHtcblx0XHRcdF9zaG93UGFuZWwoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0X2hpZGVQYW5lbCgpO1xuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBfZXZlbnRPcGVuUG9pbnRlciAoKSB7XG5cdFx0X3Nob3dQYW5lbCgpO1xuXHR9XG5cdGZ1bmN0aW9uIF9ldmVudENsb3NlUG9pbnRlciAoKSB7XG5cdFx0X2hpZGVQYW5lbCgpO1xuXHR9XG5cdGZ1bmN0aW9uIF9ldmVudERvY0NsaWNrIChlKSB7XG5cdFx0Ly9cdGNoZWNrIGlmIHRhcmdldCBpcyBwYW5lbCBvciBjaGlsZCBvZlxuXHRcdGxldCBpc1BhbmVsID0gZS50YXJnZXQgPT0gcGFuZWw7XG5cdFx0bGV0IGlzUGFuZWxDaGlsZCA9IF9jbG9zZXN0KGUudGFyZ2V0LCAoZWwpID0+IHtcblx0XHRcdGlmIChlbCAhPSBkb2MpIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoc2VsZWN0b3Iuc3Vic3RyaW5nKDEpKTtcblx0XHR9KTtcblx0XHRpZiAoIWlzUGFuZWwgJiYgIWlzUGFuZWxDaGlsZCkgX2hpZGVQYW5lbCgpO1xuXHR9XG5cdGZ1bmN0aW9uIF9ldmVudERvY0tleSAoZSkge1xuXHRcdC8vXHRlc2Mga2V5XG5cdFx0aWYgKGUua2V5Q29kZSA9PT0gMjcpIF9oaWRlUGFuZWwoKTtcblx0fVxuXHRmdW5jdGlvbiBfZXZlbnRUcmFuc2l0aW9uRW5kIChlKSB7XG5cdFx0Ly9cdHNldCB2aXNpYmlsdHkgcHJvcGVydHkgdG8gcmVtb3ZlIGtleWJvYXJkIGFjY2Vzc1xuXHRcdHBhbmVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0XHQvL1x0dHJhbnNpdGlvbiBldmVudCBub3QgbmVlZGVkXG5cdFx0X3VuYmluZFRyYW5zaXRpb25FbmQoKTtcblx0fVxuXG5cblx0Ly9cdEJpbmRpbmdzXG5cdGZ1bmN0aW9uIF9iaW5kVG9nZ2xlUG9pbnRlciAoKSB7XG5cdFx0aWYgKCEhYnV0dG9uVG9nZ2xlKSBidXR0b25Ub2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfZXZlbnRUb2dnbGVQb2ludGVyKTtcblx0fVxuXHRmdW5jdGlvbiBfYmluZE9wZW5Qb2ludGVyICgpIHtcblx0XHRpZiAoISFidXR0b25PcGVuKSBidXR0b25PcGVuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX2V2ZW50T3BlblBvaW50ZXIpO1xuXHR9XG5cdGZ1bmN0aW9uIF9iaW5kQ2xvc2VQb2ludGVyICgpIHtcblx0XHRpZiAoISFidXR0b25DbG9zZSkgYnV0dG9uQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfZXZlbnRDbG9zZVBvaW50ZXIpO1xuXHR9XG5cdGZ1bmN0aW9uIF9iaW5kRG9jQ2xpY2sgKCkge1xuXHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9ldmVudERvY0NsaWNrKTtcblx0fVxuXHRmdW5jdGlvbiBfYmluZERvY0tleSAoKSB7XG5cdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfZXZlbnREb2NLZXkpO1xuXHR9XG5cdGZ1bmN0aW9uIF9iaW5kVHJhbnNpdGlvbkVuZCAoKSB7XG5cdFx0cGFuZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRXZlbnROYW1lLCBfZXZlbnRUcmFuc2l0aW9uRW5kKTtcblx0fVxuXG5cdC8vXHRVbmJpbmRcblx0ZnVuY3Rpb24gX3VuYmluZFBvaW50ZXIgKCkge1xuXHRcdGJ1dHRvblRvZ2dsZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF9ldmVudFBvaW50ZXIpO1xuXHR9XG5cdGZ1bmN0aW9uIF91bmJpbmREb2NDbGljayAoKSB7XG5cdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX2V2ZW50RG9jQ2xpY2spO1xuXHR9XG5cdGZ1bmN0aW9uIF91bmJpbmREb2NLZXkgKCkge1xuXHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX2V2ZW50RG9jS2V5KTtcblx0fVxuXHRmdW5jdGlvbiBfdW5iaW5kVHJhbnNpdGlvbkVuZCAoKSB7XG5cdFx0cGFuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRXZlbnROYW1lLCBfZXZlbnRUcmFuc2l0aW9uRW5kKTtcblx0fVxuXG5cblx0Ly9cdEFjdGlvbnNcblx0ZnVuY3Rpb24gX3Nob3dQYW5lbCAoKSB7XG5cdFx0Ly9cdHNldCB2aXNpYmlsaXR5IHRvIG92ZXJyaWRlIGFueSBwcmV2aW91cyBzZXQgc3R5bGVcblx0XHRwYW5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXHRcdC8vXHRyZW1vdmUgYXJpYS1oaWRkZW4sIGFkZCBmb2N1c1xuXHRcdHBhbmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCBmYWxzZSk7XG5cdFx0cGFuZWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcblx0XHRwYW5lbC5mb2N1cygpO1xuXHRcdC8vXHRiaW5kIGRvY3VtZW50IGNsb3NlIGV2ZW50c1xuXHRcdF9kZWZlcihfYmluZERvY0NsaWNrKTsgLy8gdGhpcyBpc24ndCB3b3JraW5nIGZvciBlbnRlciwgd29ya3MgZm9yIHNwYWNlIHRob3VnaC4gV1RGLlxuXHRcdF9kZWZlcihfYmluZERvY0tleSk7XG5cdFx0Ly9cdHJlc2V0IHNjcm9sbCBwb3NpdGlvblxuXHRcdHBhbmVsLnNjcm9sbFRvcCA9IDA7XG5cdFx0Ly9cdGFkZCBhY3RpdmUgY2xhc3Ncblx0XHRwYW5lbC5jbGFzc0xpc3QuYWRkKHBhbmVsQWN0aXZlQ2xhc3MpO1xuXHRcdGRvY0VsLmNsYXNzTGlzdC5hZGQoYWN0aXZlQ2xhc3MpO1xuXHR9XG5cdGZ1bmN0aW9uIF9oaWRlUGFuZWwgKCkge1xuXHRcdC8vXHRhZGQgYXJpYS1oaWRkZW4sIHJlbW92ZSBmb2N1c1xuXHRcdHBhbmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblx0XHRwYW5lbC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG5cdFx0cGFuZWwuYmx1cigpO1xuXHRcdC8vXHRiaW5kIHRyYW5zaXRpb24gZW5kXG5cdFx0X2JpbmRUcmFuc2l0aW9uRW5kKCk7XG5cdFx0Ly9cdHVuYmluZCBkb2N1bWVudCBldmVudHNcblx0XHRfdW5iaW5kRG9jS2V5KCk7XG5cdFx0X3VuYmluZERvY0NsaWNrKCk7XG5cdFx0Ly9cdHJlbW92ZSBhY3RpdmUgY2xhc3Ncblx0XHRwYW5lbC5jbGFzc0xpc3QucmVtb3ZlKHBhbmVsQWN0aXZlQ2xhc3MpO1xuXHRcdGRvY0VsLmNsYXNzTGlzdC5yZW1vdmUoYWN0aXZlQ2xhc3MpO1xuXHR9XG5cdGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuXHRcdC8vXHRyZW1vdmUgYXR0cmlidXRlc1xuXHRcdF9yZW1vdmVBMTF5KCk7XG5cdFx0Ly9cdHVuYmluZCBldmVudHNcblx0XHRfdW5iaW5kUG9pbnRlcigpO1xuXHRcdF91bmJpbmREb2NDbGljaygpO1xuXHRcdF91bmJpbmREb2NLZXkoKTtcblx0XHQvL1x0cmVtb3ZlIHJlZmVyZW5jZVxuXHRcdGRvY0VsLmNsYXNzTGlzdC5yZW1vdmUocmVhZHlDbGFzcyk7XG5cdH1cblxuXG5cdC8vXHRJTklUXG5cdGZ1bmN0aW9uIGluaXQgKCkge1xuXHRcdGlmIChwYW5lbCkge1xuXHRcdFx0Ly9cdGRldGVjdCByZXF1aXJlZCBwcm9wZXJ0aWVzXG5cdFx0XHRfc2V0VHJhbnNpdGlvbkV2ZW50UHJlZml4KCk7XG5cdFx0XHQvL1x0c2V0IGExMXkgRE9NIHByb3BlcnRpZXNcblx0XHRcdF9hZGRBMTF5KCk7XG5cdFx0XHQvL1x0YmluZCBidXR0b24gZXZlbnRzXG5cdFx0XHRfYmluZFRvZ2dsZVBvaW50ZXIoKTtcblx0XHRcdF9iaW5kT3BlblBvaW50ZXIoKTtcblx0XHRcdF9iaW5kQ2xvc2VQb2ludGVyKCk7XG5cdFx0XHQvL1x0c2V0IHJlYWR5IGNsYXNzXG5cdFx0XHRkb2NFbC5jbGFzc0xpc3QuYWRkKHJlYWR5Q2xhc3MpO1xuXHRcdH1cblx0fVxuXHRpbml0KCk7XG5cblxuXHQvLyBSRVZFQUwgQVBJXG5cdHJldHVybiB7XG5cdFx0aW5pdCxcblx0XHRkZXN0cm95XG5cdH1cbn1cblxuXG4vLyBtb2R1bGUgZXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgRnJPZmZjYW52YXM7XG4iXX0=
