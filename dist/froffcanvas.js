(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Froffcanvas = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

/**
 * @param {string} panelSelector 	Off-canvas element
 * @param {string} toggleSelector 	Button with which to toggle the off-canvas state
 * @param {object} options			Object containing config overrides
 */
;
Object.defineProperty(exports, "__esModule", {
	value: true
});
var Froffcanvas = function Froffcanvas() {
	var panelSelector = arguments.length <= 0 || arguments[0] === undefined ? '.js-fr-offcanvas' : arguments[0];
	var toggleSelector = arguments.length <= 1 || arguments[1] === undefined ? '.js-fr-offcanvas-toggle' : arguments[1];

	var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	var _ref$activePanelClass = _ref.activePanelClass;
	var activePanelClass = _ref$activePanelClass === undefined ? 'fr-offcanvas--is-active' : _ref$activePanelClass;
	var _ref$readyClass = _ref.readyClass;
	var readyClass = _ref$readyClass === undefined ? 'has-fr-offcanvas' : _ref$readyClass;

	//	CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;
	var transitionEventSyntax = {
		transition: 'transitionend',
		WebkitTransition: 'webkitTransitionEnd',
		MozTransition: 'transitionend',
		OTransition: 'oTransitionEnd otransitionend'
	};

	//	SUPPORTS
	if (!'querySelector' in document || !'addEventListener' in window || !docEl.classList) return;

	//	SETUP
	var panel = doc.querySelector(panelSelector);
	var toggle = doc.querySelector(toggleSelector);
	var transitionEventName = 'transitionend';

	//	UTILS
	function _defer(func) {
		//	wrapped in setTimeout to delay binding until previous rendering has completed
		if (typeof func === 'function') setTimeout(func, 0);
	}
	function _closest(el, fn) {
		// closest: http://clubmate.fi/jquerys-closest-function-and-pure-javascript-alternatives/
		return el && (fn(el) ? el : _closest(el.parentNode, fn));
	}

	//	Cross-browser
	function _setTransitionEventPrefix() {
		for (var prefix in transitionEventSyntax) {
			if (panel.style[prefix] !== undefined) return transitionEventSyntax[prefix];
		}
	}

	//	A11y
	function _addA11y() {
		//	add aria-hidden attribute
		panel.setAttribute('aria-hidden', true);
	}
	function _removeA11y() {
		//	add aria-hidden attribute
		panel.removeAttribute('aria-hidden');
	}

	//	Events
	function _eventPointer() {
		var panelHidden = panel.getAttribute('aria-hidden') === 'true';
		if (panelHidden) {
			_showPanel();
		} else {
			_hidePanel();
		}
	}
	function _eventDocClick(e) {
		//	check if target is panel or child of
		var isPanel = e.target == panel;
		var isPanelChild = _closest(e.target, function (el) {
			if (el != doc) return el.classList.contains(panelSelector.substring(1));
		});
		if (!isPanel && !isPanelChild) _hidePanel();
	}
	function _eventDocKey(e) {
		//	esc key
		if (e.keyCode === 27) _hidePanel();
	}
	function _eventTransitionEnd(e) {
		//	set visibilty property to remove keyboard access
		panel.style.visibility = 'hidden';
		//	transition event not needed
		_unbindTransitionEnd();
	}

	//	Bindings
	function _bindPointer() {
		toggle.addEventListener('click', _eventPointer);
	}
	function _bindDocClick() {
		doc.addEventListener('click', _eventDocClick);
	}
	function _bindDocKey() {
		doc.addEventListener('keydown', _eventDocKey);
	}
	function _bindTransitionEnd() {
		panel.addEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Unbind
	function _unbindPointer() {
		toggle.removeEventListener('click', _eventPointer);
	}
	function _unbindDocClick() {
		doc.removeEventListener('click', _eventDocClick);
	}
	function _unbindDocKey() {
		doc.removeEventListener('keydown', _eventDocKey);
	}
	function _unbindTransitionEnd() {
		panel.removeEventListener(transitionEventName, _eventTransitionEnd);
	}

	//	Actions
	function _showPanel() {
		//	remove aria-hidden, add focus
		panel.setAttribute('aria-hidden', false);
		panel.setAttribute('tabindex', 0);
		panel.focus();
		//	set visibility to override any previous set style
		panel.style.visibility = 'visible';
		//	bind document close events
		_defer(_bindDocClick); // this isn't working for enter, works for space though. WTF.
		_defer(_bindDocKey);
		//	add active class
		panel.classList.add(activePanelClass);
	}
	function _hidePanel() {
		//	add aria-hidden, remove focus
		panel.setAttribute('aria-hidden', true);
		panel.setAttribute('tabindex', -1);
		panel.blur();
		//	bind transition end
		_bindTransitionEnd();
		//	unbind document events
		_unbindDocKey();
		_unbindDocClick();
		//	remove active class
		panel.classList.remove(activePanelClass);
	}
	function destroy() {
		//	remove attributes
		_removeA11y();
		//	unbind events
		_unbindPointer();
		_unbindDocClick();
		_unbindDocKey();
		//	remove reference
		docEl.classList.remove(readyClass);
	}

	//	INIT
	function _init() {
		if (panel) {
			_addA11y();
			_bindPointer();
			_setTransitionEventPrefix();
			docEl.classList.add(readyClass);
		}
	}
	_init();

	// REVEAL API
	return {
		destroy: destroy
	};
};

// module exports
exports.default = Froffcanvas;
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJfY29tcG9uZW50cy9vZmZjYW52YXMvb2ZmY2FudmFzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7Ozs7QUFBWSxDQUFDOzs7O0FBT2IsSUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFXLEdBT2Q7S0FORCxhQUFhLHlEQUFHLGtCQUFrQjtLQUNsQyxjQUFjLHlEQUFHLHlCQUF5Qjs7a0VBSXRDLEVBQUU7O2tDQUZMLGdCQUFnQjtLQUFFLGdCQUFnQix5Q0FBRyx5QkFBeUI7NEJBQzlELFVBQVU7S0FBRSxVQUFVLG1DQUFHLGtCQUFrQjs7O0FBTTdDLEtBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQztBQUNyQixLQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDO0FBQ2xDLEtBQU0scUJBQXFCLEdBQUc7QUFDN0IsWUFBVSxFQUFFLGVBQWU7QUFDM0Isa0JBQWdCLEVBQUUscUJBQXFCO0FBQ3ZDLGVBQWEsRUFBRSxlQUFlO0FBQzlCLGFBQVcsRUFBRSwrQkFBK0I7RUFDNUM7OztBQUFDLEFBSUYsS0FBSSxDQUFDLGVBQWUsSUFBSSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE9BQU87OztBQUFBLEFBSTlGLEtBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0MsS0FBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMvQyxLQUFJLG1CQUFtQixHQUFHLGVBQWU7OztBQUFDLEFBSzFDLFVBQVMsTUFBTSxDQUFFLElBQUksRUFBRTs7QUFFdEIsTUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNw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QUFZLEVBQUUsQ0FBQztBQUNmLDRCQUF5QixFQUFFLENBQUM7QUFDNUIsUUFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDaEM7RUFDRDtBQUNELE1BQUssRUFBRTs7O0FBQUMsQUFJUixRQUFPO0FBQ04sU0FBTyxFQUFQLE9BQU87RUFDUCxDQUFBO0NBQ0Q7OztBQUFBLGtCQUljLFdBQVciLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYW5lbFNlbGVjdG9yIFx0T2ZmLWNhbnZhcyBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9nZ2xlU2VsZWN0b3IgXHRCdXR0b24gd2l0aCB3aGljaCB0byB0b2dnbGUgdGhlIG9mZi1jYW52YXMgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHRcdFx0T2JqZWN0IGNvbnRhaW5pbmcgY29uZmlnIG92ZXJyaWRlc1xuICovXG5jb25zdCBGcm9mZmNhbnZhcyA9IGZ1bmN0aW9uKFxuXHRcdHBhbmVsU2VsZWN0b3IgPSAnLmpzLWZyLW9mZmNhbnZhcycsXG5cdFx0dG9nZ2xlU2VsZWN0b3IgPSAnLmpzLWZyLW9mZmNhbnZhcy10b2dnbGUnLFxuXHRcdHtcblx0XHRcdGFjdGl2ZVBhbmVsQ2xhc3M6IGFjdGl2ZVBhbmVsQ2xhc3MgPSAnZnItb2ZmY2FudmFzLS1pcy1hY3RpdmUnLFxuXHRcdFx0cmVhZHlDbGFzczogcmVhZHlDbGFzcyA9ICdoYXMtZnItb2ZmY2FudmFzJ1xuXHRcdH0gPSB7fVxuXHQpIHtcblxuXG5cdC8vXHRDT05TVEFOVFNcblx0Y29uc3QgZG9jID0gZG9jdW1lbnQ7XG5cdGNvbnN0IGRvY0VsID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0Y29uc3QgdHJhbnNpdGlvbkV2ZW50U3ludGF4ID0ge1xuXHRcdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcblx0XHRXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG5cdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuXHRcdE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnXG5cdH07XG5cblxuXHQvL1x0U1VQUE9SVFNcblx0aWYgKCEncXVlcnlTZWxlY3RvcicgaW4gZG9jdW1lbnQgfHwgISdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cgfHwgIWRvY0VsLmNsYXNzTGlzdCkgcmV0dXJuO1xuXG5cblx0Ly9cdFNFVFVQXG5cdGxldCBwYW5lbCA9IGRvYy5xdWVyeVNlbGVjdG9yKHBhbmVsU2VsZWN0b3IpO1xuXHRsZXQgdG9nZ2xlID0gZG9jLnF1ZXJ5U2VsZWN0b3IodG9nZ2xlU2VsZWN0b3IpO1xuXHRsZXQgdHJhbnNpdGlvbkV2ZW50TmFtZSA9ICd0cmFuc2l0aW9uZW5kJztcblxuXG5cblx0Ly9cdFVUSUxTXG5cdGZ1bmN0aW9uIF9kZWZlciAoZnVuYykge1xuXHRcdC8vXHR3cmFwcGVkIGluIHNldFRpbWVvdXQgdG8gZGVsYXkgYmluZGluZyB1bnRpbCBwcmV2aW91cyByZW5kZXJpbmcgaGFzIGNvbXBsZXRlZFxuXHRcdGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykgc2V0VGltZW91dChmdW5jLCAwKTtcblx0fVxuXHRmdW5jdGlvbiBfY2xvc2VzdCAoZWwsIGZuKSB7XG5cdFx0Ly8gY2xvc2VzdDogaHR0cDovL2NsdWJtYXRlLmZpL2pxdWVyeXMtY2xvc2VzdC1mdW5jdGlvbi1hbmQtcHVyZS1qYXZhc2NyaXB0LWFsdGVybmF0aXZlcy9cblx0XHRyZXR1cm4gZWwgJiYgKGZuKGVsKSA/IGVsIDogX2Nsb3Nlc3QoZWwucGFyZW50Tm9kZSwgZm4pKTtcblx0fVxuXG5cblx0Ly9cdENyb3NzLWJyb3dzZXJcblx0ZnVuY3Rpb24gX3NldFRyYW5zaXRpb25FdmVudFByZWZpeCAoKSB7XG5cdFx0Zm9yICh2YXIgcHJlZml4IGluIHRyYW5zaXRpb25FdmVudFN5bnRheCkge1xuXHRcdFx0aWYgKHBhbmVsLnN0eWxlW3ByZWZpeF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRyYW5zaXRpb25FdmVudFN5bnRheFtwcmVmaXhdO1xuXHRcdH1cblx0fVxuXG5cblx0Ly9cdEExMXlcblx0ZnVuY3Rpb24gX2FkZEExMXkgKCkge1xuXHRcdC8vXHRhZGQgYXJpYS1oaWRkZW4gYXR0cmlidXRlXG5cdFx0cGFuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXHR9XG5cdGZ1bmN0aW9uIF9yZW1vdmVBMTF5ICgpIHtcblx0XHQvL1x0YWRkIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZVxuXHRcdHBhbmVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblx0fVxuXG5cblx0Ly9cdEV2ZW50c1xuXHRmdW5jdGlvbiBfZXZlbnRQb2ludGVyICgpIHtcblx0XHRsZXQgcGFuZWxIaWRkZW4gPSBwYW5lbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJztcblx0XHRpZiAocGFuZWxIaWRkZW4pIHtcblx0XHRcdF9zaG93UGFuZWwoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0X2hpZGVQYW5lbCgpO1xuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBfZXZlbnREb2NDbGljayAoZSkge1xuXHRcdC8vXHRjaGVjayBpZiB0YXJnZXQgaXMgcGFuZWwgb3IgY2hpbGQgb2Zcblx0XHRsZXQgaXNQYW5lbCA9IGUudGFyZ2V0ID09IHBhbmVsO1xuXHRcdGxldCBpc1BhbmVsQ2hpbGQgPSBfY2xvc2VzdChlLnRhcmdldCwgKGVsKSA9PiB7XG5cdFx0XHRpZiAoZWwgIT0gZG9jKSByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhbmVsU2VsZWN0b3Iuc3Vic3RyaW5nKDEpKTtcblx0XHR9KTtcblx0XHRpZiAoIWlzUGFuZWwgJiYgIWlzUGFuZWxDaGlsZCkgX2hpZGVQYW5lbCgpO1xuXHR9XG5cdGZ1bmN0aW9uIF9ldmVudERvY0tleSAoZSkge1xuXHRcdC8vXHRlc2Mga2V5XG5cdFx0aWYgKGUua2V5Q29kZSA9PT0gMjcpIF9oaWRlUGFuZWwoKTtcblx0fVxuXHRmdW5jdGlvbiBfZXZlbnRUcmFuc2l0aW9uRW5kIChlKSB7XG5cdFx0Ly9cdHNldCB2aXNpYmlsdHkgcHJvcGVydHkgdG8gcmVtb3ZlIGtleWJvYXJkIGFjY2Vzc1xuXHRcdHBhbmVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0XHQvL1x0dHJhbnNpdGlvbiBldmVudCBub3QgbmVlZGVkXG5cdFx0X3VuYmluZFRyYW5zaXRpb25FbmQoKTtcblx0fVxuXG5cblx0Ly9cdEJpbmRpbmdzXG5cdGZ1bmN0aW9uIF9iaW5kUG9pbnRlciAoKSB7XG5cdFx0dG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX2V2ZW50UG9pbnRlcik7XG5cdH1cblx0ZnVuY3Rpb24gX2JpbmREb2NDbGljayAoKSB7XG5cdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX2V2ZW50RG9jQ2xpY2spO1xuXHR9XG5cdGZ1bmN0aW9uIF9iaW5kRG9jS2V5ICgpIHtcblx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIF9ldmVudERvY0tleSk7XG5cdH1cblx0ZnVuY3Rpb24gX2JpbmRUcmFuc2l0aW9uRW5kICgpIHtcblx0XHRwYW5lbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FdmVudE5hbWUsIF9ldmVudFRyYW5zaXRpb25FbmQpO1xuXHR9XG5cblx0Ly9cdFVuYmluZFxuXHRmdW5jdGlvbiBfdW5iaW5kUG9pbnRlciAoKSB7XG5cdFx0dG9nZ2xlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX2V2ZW50UG9pbnRlcik7XG5cdH1cblx0ZnVuY3Rpb24gX3VuYmluZERvY0NsaWNrICgpIHtcblx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfZXZlbnREb2NDbGljayk7XG5cdH1cblx0ZnVuY3Rpb24gX3VuYmluZERvY0tleSAoKSB7XG5cdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfZXZlbnREb2NLZXkpO1xuXHR9XG5cdGZ1bmN0aW9uIF91bmJpbmRUcmFuc2l0aW9uRW5kICgpIHtcblx0XHRwYW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FdmVudE5hbWUsIF9ldmVudFRyYW5zaXRpb25FbmQpO1xuXHR9XG5cblxuXHQvL1x0QWN0aW9uc1xuXHRmdW5jdGlvbiBfc2hvd1BhbmVsICgpIHtcblx0XHQvL1x0cmVtb3ZlIGFyaWEtaGlkZGVuLCBhZGQgZm9jdXNcblx0XHRwYW5lbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuXHRcdHBhbmVsLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcblx0XHRwYW5lbC5mb2N1cygpO1xuXHRcdC8vXHRzZXQgdmlzaWJpbGl0eSB0byBvdmVycmlkZSBhbnkgcHJldmlvdXMgc2V0IHN0eWxlXG5cdFx0cGFuZWwuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcblx0XHQvL1x0YmluZCBkb2N1bWVudCBjbG9zZSBldmVudHNcblx0XHRfZGVmZXIoX2JpbmREb2NDbGljayk7IC8vIHRoaXMgaXNuJ3Qgd29ya2luZyBmb3IgZW50ZXIsIHdvcmtzIGZvciBzcGFjZSB0aG91Z2guIFdURi5cblx0XHRfZGVmZXIoX2JpbmREb2NLZXkpO1xuXHRcdC8vXHRhZGQgYWN0aXZlIGNsYXNzXG5cdFx0cGFuZWwuY2xhc3NMaXN0LmFkZChhY3RpdmVQYW5lbENsYXNzKTtcblx0fVxuXHRmdW5jdGlvbiBfaGlkZVBhbmVsICgpIHtcblx0XHQvL1x0YWRkIGFyaWEtaGlkZGVuLCByZW1vdmUgZm9jdXNcblx0XHRwYW5lbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cdFx0cGFuZWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcblx0XHRwYW5lbC5ibHVyKCk7XG5cdFx0Ly9cdGJpbmQgdHJhbnNpdGlvbiBlbmRcblx0XHRfYmluZFRyYW5zaXRpb25FbmQoKTtcblx0XHQvL1x0dW5iaW5kIGRvY3VtZW50IGV2ZW50c1xuXHRcdF91bmJpbmREb2NLZXkoKTtcblx0XHRfdW5iaW5kRG9jQ2xpY2soKTtcblx0XHQvL1x0cmVtb3ZlIGFjdGl2ZSBjbGFzc1xuXHRcdHBhbmVsLmNsYXNzTGlzdC5yZW1vdmUoYWN0aXZlUGFuZWxDbGFzcyk7XG5cdH1cblx0ZnVuY3Rpb24gZGVzdHJveSAoKSB7XG5cdFx0Ly9cdHJlbW92ZSBhdHRyaWJ1dGVzXG5cdFx0X3JlbW92ZUExMXkoKTtcblx0XHQvL1x0dW5iaW5kIGV2ZW50c1xuXHRcdF91bmJpbmRQb2ludGVyKCk7XG5cdFx0X3VuYmluZERvY0NsaWNrKCk7XG5cdFx0X3VuYmluZERvY0tleSgpO1xuXHRcdC8vXHRyZW1vdmUgcmVmZXJlbmNlXG5cdFx0ZG9jRWwuY2xhc3NMaXN0LnJlbW92ZShyZWFkeUNsYXNzKTtcblx0fVxuXG5cblx0Ly9cdElOSVRcblx0ZnVuY3Rpb24gX2luaXQgKCkge1xuXHRcdGlmIChwYW5lbCkge1xuXHRcdFx0X2FkZEExMXkoKTtcblx0XHRcdF9iaW5kUG9pbnRlcigpO1xuXHRcdFx0X3NldFRyYW5zaXRpb25FdmVudFByZWZpeCgpO1xuXHRcdFx0ZG9jRWwuY2xhc3NMaXN0LmFkZChyZWFkeUNsYXNzKTtcblx0XHR9XG5cdH1cblx0X2luaXQoKTtcblxuXG5cdC8vIFJFVkVBTCBBUElcblx0cmV0dXJuIHtcblx0XHRkZXN0cm95XG5cdH1cbn1cblxuXG4vLyBtb2R1bGUgZXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgRnJvZmZjYW52YXM7XG4iXX0=
