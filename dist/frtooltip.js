(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Frtooltip = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

// Move Array prototype to NodeList (allows for Array methods on NodeLists)
// https://gist.github.com/paulirish/12fb951a8b893a454b32 (#gistcomment-1487315)
;
Object.defineProperty(exports, "__esModule", {
	value: true
});
Object.setPrototypeOf(NodeList.prototype, Array.prototype);

/**
 * @param {string} selector The selector to match for tab components
 */
var Frtooltip = function Frtooltip() {
	var selector = arguments.length <= 0 || arguments[0] === undefined ? '.js-fr-tooltip' : arguments[0];

	// CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;

	// SUPPORTS
	if (!'querySelector' in document || !'addEventListener' in window || !docEl.classList) return;

	// SETUP
	// set tab element NodeLists
	var tooltips = document.querySelectorAll(selector);
	var currentTooltip = undefined;

	// PRIVATE METHODS
	//	bindings
	function _bindMouseOver(tooltip) {
		tooltip.addEventListener('mouseover', _eventMouseOver);
	}
	function _bindMouseOut(tooltip) {
		tooltip.addEventListener('mouseout', _eventMouseOut);
	}
	function _bindFocus(tooltip) {
		tooltip.addEventListener('focus', _eventFocus);
	}
	function _bindBlur(tooltip) {
		tooltip.addEventListener('blur', _eventBlur);
	}

	//	events
	function _eventMouseOver(e) {
		_showTooltip(e.target);
	}
	function _eventMouseOut() {
		_hideTooltip(currentTooltip);
	}
	function _eventFocus(e) {
		_showTooltip(e.target);
	}
	function _eventBlur(e) {
		_hideTooltip(e.target);
	}

	//	actions
	function _showTooltip(_this) {
		var id = _this.getAttribute('aria-describedby');
		currentTooltip = document.querySelector('#' + id);
		_toggleTooltip(currentTooltip, false);
	}
	function _hideTooltip() {
		_toggleTooltip(currentTooltip, true);
	}
	function _toggleTooltip(tooltip, state) {
		tooltip.setAttribute('aria-hidden', state);
	}

	// INIT
	function _init() {
		if (tooltips.length) {
			tooltips.forEach(function (tooltip) {
				//	bind all interaction events
				_bindMouseOver(tooltip);
				_bindMouseOut(tooltip);
				_bindFocus(tooltip);
				_bindBlur(tooltip);
			});
		}
	}
	_init();

	// REVEAL API
	return {};
};

// module exports
exports.default = Frtooltip;
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJfY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTs7OztBQUFZLENBQUM7Ozs7QUFJYixNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7Ozs7QUFBQyxBQUszRCxJQUFJLFNBQVMsR0FBRyxTQUFaLFNBQVMsR0FBMEM7S0FBN0IsUUFBUSx5REFBRyxnQkFBZ0I7OztBQUlwRCxLQUFNLEdBQUcsR0FBRyxRQUFRLENBQUM7QUFDckIsS0FBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGVBQWU7OztBQUFDLEFBSWxDLEtBQUksQ0FBQyxlQUFlLElBQUksUUFBUSxJQUFJLENBQUMsa0JBQWtCLElBQUksTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPOzs7O0FBQUEsQUFLOUYsS0FBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25ELEtBQUksY0FBYyxZQUFBOzs7O0FBQUMsQUFLbkIsVUFBUyxjQUFjLENBQUMsT0FBTyxFQUFFO0FBQ2hDLFNBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7RUFDdkQ7QUFDRCxVQUFTLGFBQWEsQ0FBQyxPQUFPLEVBQUU7QUFDL0IsU0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztFQUNyRDtBQUNELFVBQVMsVUFBVSxDQUFDLE9BQU8sRUFBRTtBQUM1QixTQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0VBQy9DO0FBQ0QsVUFBUyxTQUFTLENBQUMsT0FBTyxFQUFFO0FBQzNCLFNBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7RUFDN0M7OztBQUFBLEFBSUQsVUFBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO0FBQzNCLGNBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDdkI7QUFDRCxVQUFTLGNBQWMsR0FBRztBQUN6QixjQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7RUFDN0I7QUFDRCxVQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUU7QUFDdkIsY0FBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN2QjtBQUNELFVBQVMsVUFBVSxDQUFDLENBQUMsRUFBRTtBQUN0QixjQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZCOzs7QUFBQSxBQUlELFVBQVMsWUFBWSxDQUFDLEtBQUssRUFBRTtBQUM1QixNQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEQsZ0JBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNsRCxnQkFBYyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztFQUN0QztBQUNELFVBQVMsWUFBWSxHQUFHO0FBQ3ZCLGdCQUFjLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ3JDO0FBQ0QsVUFBUyxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUN2QyxTQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztFQUMzQzs7O0FBQUEsQUFJRCxVQUFTLEtBQUssR0FBSTtBQUNqQixNQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDcEIsV0FBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBSzs7QUFFN0Isa0JBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QixpQkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZCLGNBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQixhQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0dBQ0g7RUFDRDtBQUNELE1BQUssRUFBRTs7O0FBQUMsQUFJUixRQUFPLEVBQUUsQ0FBQztDQUNWOzs7QUFBQSxrQkFJYyxTQUFTIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxuLy8gTW92ZSBBcnJheSBwcm90b3R5cGUgdG8gTm9kZUxpc3QgKGFsbG93cyBmb3IgQXJyYXkgbWV0aG9kcyBvbiBOb2RlTGlzdHMpXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvMTJmYjk1MWE4Yjg5M2E0NTRiMzIgKCNnaXN0Y29tbWVudC0xNDg3MzE1KVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKE5vZGVMaXN0LnByb3RvdHlwZSwgQXJyYXkucHJvdG90eXBlKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgVGhlIHNlbGVjdG9yIHRvIG1hdGNoIGZvciB0YWIgY29tcG9uZW50c1xuICovXG5sZXQgRnJ0b29sdGlwID0gZnVuY3Rpb24gKHNlbGVjdG9yID0gJy5qcy1mci10b29sdGlwJykge1xuXG5cblx0Ly8gQ09OU1RBTlRTXG5cdGNvbnN0IGRvYyA9IGRvY3VtZW50O1xuXHRjb25zdCBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXHQvLyBTVVBQT1JUU1xuXHRpZiAoISdxdWVyeVNlbGVjdG9yJyBpbiBkb2N1bWVudCB8fCAhJ2FkZEV2ZW50TGlzdGVuZXInIGluIHdpbmRvdyB8fCAhZG9jRWwuY2xhc3NMaXN0KSByZXR1cm47XG5cblxuXHQvLyBTRVRVUFxuXHQvLyBzZXQgdGFiIGVsZW1lbnQgTm9kZUxpc3RzXG5cdGxldCB0b29sdGlwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHRsZXQgY3VycmVudFRvb2x0aXA7XG5cblxuXHQvLyBQUklWQVRFIE1FVEhPRFNcblx0Ly9cdGJpbmRpbmdzXG5cdGZ1bmN0aW9uIF9iaW5kTW91c2VPdmVyKHRvb2x0aXApIHtcblx0XHR0b29sdGlwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIF9ldmVudE1vdXNlT3Zlcik7XG5cdH1cblx0ZnVuY3Rpb24gX2JpbmRNb3VzZU91dCh0b29sdGlwKSB7XG5cdFx0dG9vbHRpcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIF9ldmVudE1vdXNlT3V0KTtcblx0fVxuXHRmdW5jdGlvbiBfYmluZEZvY3VzKHRvb2x0aXApIHtcblx0XHR0b29sdGlwLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgX2V2ZW50Rm9jdXMpO1xuXHR9XG5cdGZ1bmN0aW9uIF9iaW5kQmx1cih0b29sdGlwKSB7XG5cdFx0dG9vbHRpcC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgX2V2ZW50Qmx1cik7XG5cdH1cblxuXG5cdC8vXHRldmVudHNcblx0ZnVuY3Rpb24gX2V2ZW50TW91c2VPdmVyKGUpIHtcblx0XHRfc2hvd1Rvb2x0aXAoZS50YXJnZXQpO1xuXHR9XG5cdGZ1bmN0aW9uIF9ldmVudE1vdXNlT3V0KCkge1xuXHRcdF9oaWRlVG9vbHRpcChjdXJyZW50VG9vbHRpcCk7XG5cdH1cblx0ZnVuY3Rpb24gX2V2ZW50Rm9jdXMoZSkge1xuXHRcdF9zaG93VG9vbHRpcChlLnRhcmdldCk7XG5cdH1cblx0ZnVuY3Rpb24gX2V2ZW50Qmx1cihlKSB7XG5cdFx0X2hpZGVUb29sdGlwKGUudGFyZ2V0KTtcblx0fVxuXG5cblx0Ly9cdGFjdGlvbnNcblx0ZnVuY3Rpb24gX3Nob3dUb29sdGlwKF90aGlzKSB7XG5cdFx0bGV0IGlkID0gX3RoaXMuZ2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cdFx0Y3VycmVudFRvb2x0aXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGlkKTtcblx0XHRfdG9nZ2xlVG9vbHRpcChjdXJyZW50VG9vbHRpcCwgZmFsc2UpO1xuXHR9XG5cdGZ1bmN0aW9uIF9oaWRlVG9vbHRpcCgpIHtcblx0XHRfdG9nZ2xlVG9vbHRpcChjdXJyZW50VG9vbHRpcCwgdHJ1ZSk7XG5cdH1cblx0ZnVuY3Rpb24gX3RvZ2dsZVRvb2x0aXAodG9vbHRpcCwgc3RhdGUpIHtcblx0XHR0b29sdGlwLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCBzdGF0ZSk7XG5cdH1cblxuXG5cdC8vIElOSVRcblx0ZnVuY3Rpb24gX2luaXQgKCkge1xuXHRcdGlmICh0b29sdGlwcy5sZW5ndGgpIHtcblx0XHRcdHRvb2x0aXBzLmZvckVhY2goKHRvb2x0aXApID0+IHtcblx0XHRcdFx0Ly9cdGJpbmQgYWxsIGludGVyYWN0aW9uIGV2ZW50c1xuXHRcdFx0XHRfYmluZE1vdXNlT3Zlcih0b29sdGlwKTtcblx0XHRcdFx0X2JpbmRNb3VzZU91dCh0b29sdGlwKTtcblx0XHRcdFx0X2JpbmRGb2N1cyh0b29sdGlwKTtcblx0XHRcdFx0X2JpbmRCbHVyKHRvb2x0aXApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdF9pbml0KCk7XG5cblxuXHQvLyBSRVZFQUwgQVBJXG5cdHJldHVybiB7fTtcbn1cblxuXG4vLyBtb2R1bGUgZXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgRnJ0b29sdGlwO1xuIl19
