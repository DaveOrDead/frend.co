(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Frtabs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

// Move Array prototype to NodeList (allows for Array methods on NodeLists)
// https://gist.github.com/paulirish/12fb951a8b893a454b32 (#gistcomment-1487315)
;
Object.defineProperty(exports, "__esModule", {
	value: true
});
Object.setPrototypeOf(NodeList.prototype, Array.prototype);

/**
 * @param {string} selector The selector to match for tab components
 * @param {object} options Object containing configuration overrides
 */
var Frtabs = function Frtabs() {
	var selector = arguments.length <= 0 || arguments[0] === undefined ? '.js-fr-tabs' : arguments[0];

	var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	var _ref$tablistSelector = _ref.tablistSelector;
	var tablistSelector = _ref$tablistSelector === undefined ? '.fr-tabs__tablist' : _ref$tablistSelector;
	var _ref$activeTabClass = _ref.activeTabClass;
	var activeTabClass = _ref$activeTabClass === undefined ? 'fr-tabs__tab--is-active' : _ref$activeTabClass;
	var _ref$tabpanelSelector = _ref.tabpanelSelector;
	var tabpanelSelector = _ref$tabpanelSelector === undefined ? '.fr-tabs__panel' : _ref$tabpanelSelector;
	var _ref$activePanelClass = _ref.activePanelClass;
	var activePanelClass = _ref$activePanelClass === undefined ? 'fr-tabs__panel--is-active' : _ref$activePanelClass;
	var _ref$tabsReadyClass = _ref.tabsReadyClass;
	var tabsReadyClass = _ref$tabsReadyClass === undefined ? 'has-fr-tabs' : _ref$tabsReadyClass;

	// CONSTANTS
	var doc = document;
	var docEl = doc.documentElement;

	// SUPPORTS
	if (!'querySelector' in document || !'addEventListener' in window || !docEl.classList) return;

	// SETUP
	// set tab element NodeLists
	var tabContainers = doc.querySelectorAll(selector);
	var tabLists = doc.querySelectorAll(tablistSelector);
	var tabListItems = doc.querySelectorAll(tablistSelector + ' li');
	var tabs = doc.querySelectorAll(tablistSelector + ' a');
	var tabpanels = doc.querySelectorAll(tabpanelSelector);

	// UTILS
	// closest: http://clubmate.fi/jquerys-closest-function-and-pure-javascript-alternatives/
	function _closest(el, fn) {
		return el && (fn(el) ? el : _closest(el.parentNode, fn));
	}

	// PRIVATE METHODS
	// a11y
	function _addA11y() {
		// add role="tablist" to ul
		tabLists.forEach(function (tabList) {
			tabList.setAttribute('role', 'tablist');
		});

		// add role="presentation" to li
		tabListItems.forEach(function (tabItem) {
			tabItem.setAttribute('role', 'presentation');
		});

		// add role="tab" and aria-controls to anchor
		tabs.forEach(function (tab) {
			tab.setAttribute('role', 'tab');
			tab.setAttribute('aria-controls', tab.hash.substring(1));
		});

		// add role="tabpanel" to section
		tabpanels.forEach(function (tabpanel) {
			tabpanel.setAttribute('role', 'tabpanel');
			// make first child of tabpanel focusable if available
			if (tabpanel.children) {
				tabpanel.children[0].setAttribute('tabindex', 0);
			}
		});
	}

	function _removeA11y() {
		// remove role="tablist" from ul
		tabLists.forEach(function (tabList) {
			tabList.removeAttribute('role');
		});

		// remove role="presentation" from li
		tabListItems.forEach(function (tabItem) {
			tabItem.removeAttribute('role');
		});

		// remove role="tab" and aria-controls from anchor
		tabs.forEach(function (tab) {
			tab.removeAttribute('role');
			tab.removeAttribute('aria-controls');
		});

		// remove role="tabpanel" from section
		tabpanels.forEach(function (tabpanel) {
			tabpanel.removeAttribute('role');
			// remove first child focusability if present
			if (tabpanel.children) {
				tabpanel.children[0].removeAttribute('tabindex');
			}
		});
	}

	// events
	function _eventTabClick(e) {
		_showTab(e.target);
		e.preventDefault(); // look into remove id/settimeout/reinstate id as an alternative to preventDefault
	}

	function _eventTabKeydown(e) {
		// collect tab targets, and their parents' prev/next
		var currentTab = e.target;
		var previousTabItem = e.target.parentNode.previousElementSibling;
		var nextTabItem = e.target.parentNode.nextElementSibling;
		var newTabItem = undefined;

		// catch left and right arrow key events
		switch (e.keyCode) {
			case 37:
				newTabItem = previousTabItem;
				break;
			case 39:
				newTabItem = nextTabItem;
				break;
			default:
				newTabItem = false;
				break;
		}

		// if new next/prev tab available, show it by passing tab anchor to _showTab method
		if (newTabItem) {
			_showTab(newTabItem.querySelector('[role="tab"]'));
		}
	}

	// actions
	function _showTab(target) {
		// get context of tab container and its children
		var thisContainer = _closest(target, function (el) {
			return el.classList.contains(selector.substring(1));
		});
		var siblingTabs = thisContainer.querySelectorAll(tablistSelector + ' a');
		var siblingTabpanels = thisContainer.querySelectorAll(tabpanelSelector);

		// set inactives
		siblingTabs.forEach(function (tab) {
			tab.setAttribute('tabindex', -1);
		});
		siblingTabpanels.forEach(function (tabpanel) {
			tabpanel.setAttribute('aria-hidden', 'true');
		});

		// set actives and focus
		target.setAttribute('tabindex', 0);
		target.focus();
		doc.getElementById(target.getAttribute('aria-controls')).removeAttribute('aria-hidden');
	}

	// bindings
	function _bindTabsEvents() {
		// bind all tab click and keydown events
		tabs.forEach(function (tab) {
			tab.addEventListener('click', _eventTabClick);
			tab.addEventListener('keydown', _eventTabKeydown);
		});
	}

	function _unbindTabsEvents() {
		// unbind all tab click and keydown events
		tabs.forEach(function (tab) {
			tab.removeEventListener('click', _eventTabClick);
			tab.removeEventListener('keydown', _eventTabKeydown);
		});
	}

	// PUBLIC METHODS
	function destroy() {
		_removeA11y();
		_unbindTabsEvents();
		docEl.classList.remove(tabsReadyClass);
	}

	// INIT
	function _init() {
		if (tabContainers.length) {
			_addA11y();
			_bindTabsEvents();
			// set all first tabs active on init
			tabContainers.forEach(function (tabContainer) {
				_showTab(tabContainer.querySelector(tablistSelector + ' a'));
			});
			docEl.classList.add(tabsReadyClass);
		}
	}
	_init();

	// REVEAL API
	return {
		destroy: destroy
	};
};

// module exports
exports.default = Frtabs;
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
